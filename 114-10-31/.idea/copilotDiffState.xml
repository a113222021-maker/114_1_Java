<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Composition demo/src/Account.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Composition demo/src/Account.java" />
              <option name="originalContent" value="import java.time.LocalDateTime;&#10;&#10;// 檔案路徑: c:\Users\m306\Desktop\114_1_Java\114-10-31\Composition demo\src\Account.java&#10;public class Account {&#10;    private static int accountCount = 0; // 帳戶數量統計&#10;&#10;    // 帳戶號碼，唯一識別每個帳戶&#10;    private String accountNumber;&#10;    // 帳戶擁有者名稱&#10;    private String ownerName;&#10;    // 帳戶餘額&#10;    private double balance;&#10;    private Date openingDate;&#10;    private Time2 openingTime;&#10;&#10;    /**&#10;     * 建構子，初始化帳戶號碼與初始餘額&#10;     * @param accountNumber 帳戶號碼&#10;     * @param initialBalance 初始餘額&#10;     */&#10;    public Account(String accountNumber, String ownerName, double initialBalance) {&#10;        LocalDateTime now = LocalDateTime.now(); // 取得目前日期與時間&#10;        this.setAccountNumber(accountNumber);&#10;        this.ownerName = ownerName;&#10;        try {&#10;            this.setBalance(initialBalance);&#10;        } catch (IllegalArgumentException e) {&#10;            System.out.println(&quot;初始餘額錯誤: &quot; + e.getMessage() + &quot;，將餘額設為0&quot;);&#10;        }&#10;        accountCount++; // 帳戶數量加1&#10;        // 記錄開戶日期與時間&#10;        this.openingDate = new Date(now.getMonthValue(), now.getDayOfMonth(), now.getYear());&#10;        this.openingTime = new Time2(now.getHour(), now.getMinute(), now.getSecond());&#10;    }&#10;&#10;    public Account(String accountNumber, double initialBalance) {&#10;        this(accountNumber, &quot;未知&quot;, initialBalance);&#10;    }&#10;&#10;    public Account() {&#10;        this(&quot;未知&quot;, &quot;未知&quot;, 0);&#10;    }&#10;&#10;    public Account(String accountNumber) {&#10;        this(accountNumber, &quot;未知&quot;, 0);&#10;    }&#10;&#10;    /**&#10;     * 取得帳戶號碼&#10;     * @return 帳戶號碼&#10;     */&#10;    public String getAccountNumber() {&#10;        return accountNumber;&#10;    }&#10;&#10;    /**&#10;     * 取得帳戶餘額&#10;     * @return 帳戶餘額&#10;     */&#10;    public double getBalance() {&#10;        return balance;&#10;    }&#10;&#10;    /**&#10;     * 取得帳戶擁有者名稱&#10;     * @return 帳戶擁有者名稱&#10;     */&#10;    public String getOwnerName() {&#10;        return ownerName;&#10;    }&#10;&#10;    /**&#10;     * 設定帳戶餘額&#10;     * @param balance 欲設定的帳戶餘額，必須為正數&#10;     * @throws IllegalArgumentException 若餘額非正數則拋出例外&#10;     */&#10;    public void setBalance(double balance) {&#10;        if (balance &gt; 0) {&#10;            this.balance = balance; // 設定新的帳戶餘額&#10;        } else {&#10;            throw new IllegalArgumentException(&quot;帳戶餘額必須為正數&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 設定帳戶號碼&#10;     * @param accountNumber 欲設定的帳戶號碼&#10;     */&#10;    public void setAccountNumber(String accountNumber) {&#10;        this.accountNumber = accountNumber;&#10;    }&#10;&#10;    /**&#10;     * 存款方法，將指定金額存入帳戶&#10;     * @param amount 存入金額，必須為正數&#10;     * @throws IllegalArgumentException 若金額非正數則拋出例外&#10;     */&#10;    public void deposit(double amount) {&#10;        if (amount &gt; 0) {&#10;            balance += amount; // 增加餘額&#10;        } else {&#10;            throw new IllegalArgumentException(&quot;存款金額必須為正數&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 提款方法，從帳戶扣除指定金額&#10;     * @param amount 提款金額，必須為正數且不得超過餘額&#10;     * @throws IllegalArgumentException 若金額不合法則拋出例外&#10;     */&#10;    public void withdraw(double amount) {&#10;        if (amount &gt; 0 &amp;&amp; amount &lt;= balance) {&#10;            balance -= amount; // 減少餘額&#10;        } else {&#10;            throw new IllegalArgumentException(&quot;提款金額不合法&quot;);&#10;        }&#10;    }&#10;&#10;    // 回傳帳戶資訊的字串表示&#10;    @Override&#10;    public String toString() {&#10;        return &quot;帳戶號碼: &quot; + accountNumber +&#10;                &quot;, 持有人: &quot; + ownerName +&#10;                &quot;, 餘額: &quot; + balance;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import java.time.LocalDateTime;&#10;&#10;// 檔案路徑: c:\Users\m306\Desktop\114_1_Java\114-10-31\Composition demo\src\Account.java&#10;public class Account {&#10;    private static int accountCount = 0; // 帳戶數量統計&#10;&#10;    // 帳戶號碼，唯一識別每個帳戶&#10;    private String accountNumber;&#10;    // 帳戶擁有者名稱&#10;    private String ownerName;&#10;    // 帳戶餘額&#10;    private double balance;&#10;    private Date openingDate;&#10;    private Time2 openingTime;&#10;&#10;    /**&#10;     * 建構子，初始化帳戶號碼與初始餘額&#10;     * @param accountNumber 帳戶號碼&#10;     * @param initialBalance 初始餘額&#10;     */&#10;    public Account(String accountNumber, String ownerName, double initialBalance) {&#10;        LocalDateTime now = LocalDateTime.now(); // 取得目前日期與時間&#10;        this.setAccountNumber(accountNumber);&#10;        this.ownerName = ownerName;&#10;        try {&#10;            this.setBalance(initialBalance);&#10;        } catch (IllegalArgumentException e) {&#10;            System.out.println(&quot;初始餘額錯誤: &quot; + e.getMessage() + &quot;，將餘額設為0&quot;);&#10;            this.balance = 0; // 若初始餘額不合法，將餘額設為0&#10;        }&#10;        accountCount++; // 帳戶數量加1&#10;        // 記錄開戶日期與時間&#10;        this.openingDate = new Date(now.getMonthValue(), now.getDayOfMonth(), now.getYear());&#10;        this.openingTime = new Time2(now.getHour(), now.getMinute(), now.getSecond());&#10;    }&#10;&#10;    public Account(String accountNumber, double initialBalance) {&#10;        this(accountNumber, &quot;未知&quot;, initialBalance);&#10;    }&#10;&#10;    public Account() {&#10;        this(&quot;未知&quot;, &quot;未知&quot;, 0);&#10;    }&#10;&#10;    public Account(String accountNumber) {&#10;        this(accountNumber, &quot;未知&quot;, 0);&#10;    }&#10;&#10;    /**&#10;     * 取得帳戶號碼&#10;     * @return 帳戶號碼&#10;     */&#10;    public String getAccountNumber() {&#10;        return accountNumber;&#10;    }&#10;&#10;    /**&#10;     * 取得帳戶餘額&#10;     * @return 帳戶餘額&#10;     */&#10;    public double getBalance() {&#10;        return balance;&#10;    }&#10;&#10;    /**&#10;     * 取得帳戶擁有者名稱&#10;     * @return 帳戶擁有者名稱&#10;     */&#10;    public String getOwnerName() {&#10;        return ownerName;&#10;    }&#10;&#10;    /**&#10;     * 設定帳戶餘額&#10;     * @param balance 欲設定的帳戶餘額，必須為正數&#10;     * @throws IllegalArgumentException 若餘額非正數則拋出例外&#10;     */&#10;    public void setBalance(double balance) {&#10;        if (balance &gt; 0) {&#10;            this.balance = balance; // 設定新的帳戶餘額&#10;        } else {&#10;            throw new IllegalArgumentException(&quot;帳戶餘額必須為正數&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 設定帳戶號碼&#10;     * @param accountNumber 欲設定的帳戶號碼&#10;     */&#10;    public void setAccountNumber(String accountNumber) {&#10;        this.accountNumber = accountNumber;&#10;    }&#10;&#10;    /**&#10;     * 存款方法，將指定金額存入帳戶&#10;     * @param amount 存入金額，必須為正數&#10;     * @throws IllegalArgumentException 若金額非正數則拋出例外&#10;     */&#10;    public void deposit(double amount) {&#10;        if (amount &gt; 0) {&#10;            balance += amount; // 增加餘額&#10;        } else {&#10;            throw new IllegalArgumentException(&quot;存款金額必須為正數&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 提款方法，從帳戶扣除指定金額&#10;     * @param amount 提款金額，必須為正數且不得超過餘額&#10;     * @throws IllegalArgumentException 若金額不合法則拋出例外&#10;     */&#10;    public void withdraw(double amount) {&#10;        if (amount &gt; 0 &amp;&amp; amount &lt;= balance) {&#10;            balance -= amount; // 減少餘額&#10;        } else {&#10;            throw new IllegalArgumentException(&quot;提款金額不合法&quot;);&#10;        }&#10;    }&#10;&#10;    // 回傳帳戶資訊的字串表示&#10;    @Override&#10;    public String toString() {&#10;        return &quot;帳戶號碼: &quot; + accountNumber +&#10;                &quot;, 持有人: &quot; + ownerName +&#10;                &quot;, 餘額: &quot; + balance;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>